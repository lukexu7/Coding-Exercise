*.downloading

# Compiled class file
*.class
 
# Eclipse
.project
.classpath
.settings/
 
# Intellij
*.ipr
*.iml
*.iws
.idea/
 
# Maven
target/
 
# Gradle
build
.gradle
 
# Log file
*.log
log/
 
# out
**/out/
 
# Mac
.DS_Store
 
# others
*.jar
*.war
*.zip
*.tar
*.tar.gz
*.pid
*.orig
temp/



###########################################
############ Project Specific ############
###########################################
## folders to ignore

###########################################
############ General Setttings ############
###########################################
# Video / Image related
*.avi
*.mp4
*.jpg
*.jpeg
*.png
*.bmp

# Model file related
*.h5
*.pth
*.pb

# Intermediate files
*.zip
*.tar
*.tar
*.csv


#Pycharm specific
.idea

# Windows specific
Thumbs.db
ehthumbs.db
Desktop.ini

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don��t work, or not
#   install all needed dependencies.
#Pipfile.lock

# celery beat schedule file
celerybeat-schedule

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/
*.swo

# User ================================
# 用户自定义的其他忽略文件

# Clion ================================
# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and WebStorm
# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839


#
*.vcxproj
*.filters
# User-specific stuff
.idea/**/workspace.xml
.idea/**/tasks.xml
.idea/**/usage.statistics.xml
.idea/**/dictionaries
.idea/**/shelf

# Generated files
.idea/**/contentModel.xml

# Sensitive or high-churn files
.idea/**/dataSources/
.idea/**/dataSources.ids
.idea/**/dataSources.local.xml
.idea/**/sqlDataSources.xml
.idea/**/dynamic.xml
.idea/**/uiDesigner.xml
.idea/**/dbnavigator.xml

# Gradle
.idea/**/gradle.xml
.idea/**/libraries

# Gradle and Maven with auto-import
# When using Gradle or Maven with auto-import, you should exclude module files,
# since they will be recreated, and may cause churn.  Uncomment if using
# auto-import.
# .idea/modules.xml
# .idea/*.iml
# .idea/modules
# *.iml
# *.ipr

# CMake
cmake-build-*/

# Mongo Explorer plugin
.idea/**/mongoSettings.xml

# File-based project format
*.iws

# IntelliJ
out/

# mpeltonen/sbt-idea plugin
.idea_modules/

# JIRA plugin
atlassian-ide-plugin.xml

# Cursive Clojure plugin
.idea/replstate.xml

# Crashlytics plugin (for Android Studio and IntelliJ)
com_crashlytics_export_strings.xml
crashlytics.properties
crashlytics-build.properties
fabric.properties

# Editor-based Rest Client
.idea/httpRequests

# Android studio 3.1+ serialized cache file
.idea/caches/build_file_checksums.ser

# vscode ================================
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json

# C++ ================================
 Prerequisites
*.d

# Compiled Object files
*.slo
*.lo
*.o
*.obj

# Precompiled Headers
*.gch
*.pch

# Compiled Dynamic libraries
*.so
*.dylib
*.dll

# Fortran module files
*.mod
*.smod

# Compiled Static libraries
*.lai
*.la
*.a
*.lib

# Executables
*.exe
*.out
*.app



# CMake ================================
bin/
build/
CMakeLists.txt.user
CMakeCache.txt
CMakeFiles
CMakeScripts
Testing
Makefile
cmake_install.cmake
install_manifest.txt
compile_commands.json
CTestTestfile.cmake


#folder============================
.vs
java/shangguigu2023/chapter04/.gitignore
java/shangguigu2023/project01/.gitignore
java/shangguigu2023/chapter08/.gitignore
java/shangguigu2023/chapter07/.gitignore
C++/C++学习教程/05_流程控制语句/x64/Debug/05_流程控制语句.tlog/CL.command.1.tlog
C++/C++学习教程/05_流程控制语句/x64/Debug/05_流程控制语句.tlog/CL.read.1.tlog
C++/C++学习教程/05_流程控制语句/x64/Debug/05_流程控制语句.exe.recipe
C++/C++学习教程/05_流程控制语句/x64/Debug/05_流程控制语句.ilk
C++/C++学习教程/05_流程控制语句/x64/Debug/vc143.idb
C++/C++学习教程/05_流程控制语句/x64/Debug/vc143.pdb
C++/C++学习教程/05_流程控制语句/x64/Debug/05_流程控制语句.tlog/05_流程控制语句.lastbuildstate
C++/C++学习教程/05_流程控制语句/x64/Debug/05_流程控制语句.tlog/CL.write.1.tlog
C++/C++学习教程/05_流程控制语句/x64/Debug/05_流程控制语句.tlog/link.command.1.tlog
C++/C++学习教程/05_流程控制语句/x64/Debug/05_流程控制语句.tlog/link.read.1.tlog
C++/C++学习教程/05_流程控制语句/x64/Debug/05_流程控制语句.tlog/link.write.1.tlog
C++/C++学习教程/x64/Debug/05_流程控制语句.pdb
java/shangguigu2023/chapter05/.gitignore
java/shangguigu2023/chapter15/hello_copy.txt
java/shangguigu2023/chapter15/hellocopy1.txt
java/shangguigu2023/chapter15/info.txt
.gitignore
Scala/scala_tutorial/.metals/metals.lock.db
